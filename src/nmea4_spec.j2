{% include "head.j2" %}

/* {{ descr }} */
#[derive(Debug)]
pub struct Nmea{{ name }}Message { 
    {% for field in fields %}pub {{ field.name }}: {{ field.type }},             // {{ field.descr }}
    {% endfor %}
}

impl Nmea{{ name }}Message {
    pub fn new() -> Nmea{{ name }}Message {
        Nmea{{ name }}Message { 
            {% for field in fields %}{{ field.name }}: {{ field.default }},
            {% endfor %}
        }
    }
}

impl MessageFields for Nmea{{ name }}Message {
    fn clear(&mut self) { 
        {% for field in fields %}self.{{ field.name }}= {{ field.default }};
        {% endfor %}
    }

    fn get_field_mut(&mut self, idx: u8) -> &mut dyn FromSlice {
        match idx {
            {% for field in fields %}{{ loop.index -1 }} => &mut self.{{ field.name }},
            {% endfor %}
            _ => panic!("Invalid field index"),
        }
    }

    #[inline]
    fn field_count(&self) -> u8 {
        {{ fields|length }}
    }

    #[inline]
    fn get_addr(&self) -> AddrField<'static> {
        AddrField::new("{{ tag }}".as_bytes())
    }

    #[inline]
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }
}
