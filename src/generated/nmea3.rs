/**********************************************************************
* Autogenerated file, all manual changes will be lost!
***********************************************************************/

use crate::messages::{MessageFields, FromSlice, AddrField, MessagesMap};

/// Generated fn for initializing all message types.
impl MessagesMap {
    pub fn add_all_messages(&mut self) {
        let msgs: Vec<Box<dyn MessageFields>> = vec![
            Box::new(NmeaGllMessage::new()),        //  GLL
            ];

        for m in msgs {
            let k = m.get_addr();
            self.msgs.insert(k, m);
        }
    }
}

/// All implemented NMEA messages.
pub enum NmeaMessages {
    GLL,
}

/// GLL NMEA message v3
#[derive(Debug)]
pub struct NmeaGllMessage { 
    pub latitude: f64,             // 
    pub latitude_dir: u8,             // 
    pub longitude: f64,             // 
    pub longitude_dir: u8,             // 
    pub utc: Option<String>,             // 
    pub status: Option<u8>,             // 
    
}

impl NmeaGllMessage {
    pub fn new() -> NmeaGllMessage {
        NmeaGllMessage { 
            latitude: 0.0,
            latitude_dir: b'N',
            longitude: 0.0,
            longitude_dir: b'E',
            utc: None,
            status: None,
            
        }
    }
}

impl MessageFields for NmeaGllMessage {
    fn clear(&mut self) { 
        self.latitude= 0.0;
        self.latitude_dir= b'N';
        self.longitude= 0.0;
        self.longitude_dir= b'E';
        self.utc= None;
        self.status= None;
        
    }

    fn get_field_mut(&mut self, idx: u8) -> &mut dyn FromSlice {
        match idx {
            0 => &mut self.latitude,
            1 => &mut self.latitude_dir,
            2 => &mut self.longitude,
            3 => &mut self.longitude_dir,
            4 => &mut self.utc,
            5 => &mut self.status,
            
            _ => panic!("Invalid field index"),
        }
    }

    #[inline]
    fn field_count(&self) -> u8 {
        6
    }

    #[inline]
    fn get_addr(&self) -> AddrField<'static> {
        AddrField::new("GLL".as_bytes())
    }

    #[inline]
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }

    #[inline]
    fn message_type(&self) -> NmeaMessages {
        NmeaMessages::GLL
    }
}
